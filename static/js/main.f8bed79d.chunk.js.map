{"version":3,"sources":["config/index.js","substrate-lib/SubstrateContext.js","substrate-lib/utils.js","substrate-lib/components/TxButton.js","substrate-lib/components/DeveloperConsole.js","BlockInfo.js","TemplateModule.js","SearchBlock.js","App.js","index.js"],"names":["configEnv","require","envVars","reduce","mem","n","undefined","process","slice","config","configCommon","connectedSocket","queryString","parse","window","location","search","rpc","PROVIDER_SOCKET","console","log","INIT_STATE","socket","jsonrpc","RPC","types","CUSTOM_TYPES","keyring","keyringState","api","apiError","apiState","reducer","state","action","type","payload","Error","loadAccts","SubstrateContext","React","createContext","SubstrateContextProvider","props","initState","forEach","key","useReducer","dispatch","provider","WsProvider","_api","ApiPromise","on","isReady","then","err","connect","asyncLoadAccounts","a","web3Enable","APP_NAME","web3Accounts","allAccounts","map","address","meta","name","source","loadAll","isDevelopment","DEVELOPMENT_KEYRING","error","loadAccounts","Provider","value","children","useSubstrate","useContext","utils","paramConversion","num","TxButton","accountPair","label","setStatus","color","style","attrs","disabled","useState","unsub","setUnsub","sudoKey","setSudoKey","palletRpc","callable","inputParams","paramFields","isSudo","isUncheckedSudo","useEffect","acctPair","getFromAcct","isInjected","web3FromSource","injected","fromAcct","setSigner","signer","txResHandler","status","isFinalized","asFinalized","toString","txErrHandler","sudoTx","transformed","transformParams","txExecute","tx","sudo","signAndSend","catch","uncheckedSudoTx","sudoUncheckedWeight","signedTx","unsignedTx","send","queryResHandler","result","isNone","query","emptyAsNull","constant","consts","transaction","opts","paramVal","inputParam","trim","params","field","ind","memo","converted","indexOf","split","e","single","isNumType","Number","parseFloat","parseInt","some","el","Button","basic","onClick","length","every","paramField","param","optional","DeveloperConsole","util","utilCrypto","BlockInfo","blockInfo","setBlockInfo","chain","subscribeNewHeads","header","number","toNumber","hash","toHex","parentHash","stateRoot","toHuman","extrinsicsRoot","getData","Grid","Column","Table","celled","striped","size","Body","info","Row","Cell","width","textAlign","Main","currentValue","setCurrentValue","formValue","setFormValue","unsubscribe","templateModule","something","newValue","unwrap","Card","centered","Content","Statistic","Form","Field","Input","onChange","_","overflowWrap","TemplateModule","SearchBlock","inputRef","useRef","handleSearch","searchValue","current","block","getBlock","getBlockHash","ref","accountAddress","getPair","loader","text","Dimmer","active","Loader","columns","padded","Message","negative","compact","floating","content","JSON","stringify","contextRef","createRef","Container","stackable","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f8bed79d.chunk.js","sourcesContent":["import configCommon from './common.json';\n// Using `require` as `import` does not support dynamic loading (yet).\nconst configEnv = require(`./${process.env.NODE_ENV}.json`);\n\n// Accepting React env vars and aggregating them into `config` object.\nconst envVarNames = [\n  'REACT_APP_PROVIDER_SOCKET',\n  'REACT_APP_DEVELOPMENT_KEYRING'\n];\nconst envVars = envVarNames.reduce((mem, n) => {\n  // Remove the `REACT_APP_` prefix\n  if (process.env[n] !== undefined) mem[n.slice(10)] = process.env[n];\n  return mem;\n}, {});\n\nconst config = { ...configCommon, ...configEnv, ...envVars };\nexport default config;\n","import React, { useReducer, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport jsonrpc from '@polkadot/types/interfaces/jsonrpc';\nimport queryString from 'query-string';\n\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\nimport keyring from '@polkadot/ui-keyring';\n\nimport config from '../config';\n\nconst parsedQuery = queryString.parse(window.location.search);\nconst connectedSocket = parsedQuery.rpc || config.PROVIDER_SOCKET;\nconsole.log(`Connected socket: ${connectedSocket}`);\n\n///\n// Initial state for `useReducer`\n\nconst INIT_STATE = {\n  socket: connectedSocket,\n  jsonrpc: { ...jsonrpc, ...config.RPC },\n  types: config.CUSTOM_TYPES,\n  keyring: null,\n  keyringState: null,\n  api: null,\n  apiError: null,\n  apiState: null\n};\n\n///\n// Reducer function for `useReducer`\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'CONNECT_INIT':\n      return { ...state, apiState: 'CONNECT_INIT' };\n\n    case 'CONNECT':\n      return { ...state, api: action.payload, apiState: 'CONNECTING' };\n\n    case 'CONNECT_SUCCESS':\n      return { ...state, apiState: 'READY' };\n\n    case 'CONNECT_ERROR':\n      return { ...state, apiState: 'ERROR', apiError: action.payload };\n\n    case 'LOAD_KEYRING':\n      return { ...state, keyringState: 'LOADING' };\n\n    case 'SET_KEYRING':\n      return { ...state, keyring: action.payload, keyringState: 'READY' };\n\n    case 'KEYRING_ERROR':\n      return { ...state, keyring: null, keyringState: 'ERROR' };\n\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n};\n\n///\n// Connecting to the Substrate node\n\nconst connect = (state, dispatch) => {\n  const { apiState, socket, jsonrpc, types } = state;\n  // We only want this function to be performed once\n  if (apiState) return;\n\n  dispatch({ type: 'CONNECT_INIT' });\n\n  const provider = new WsProvider(socket);\n  const _api = new ApiPromise({ provider, types, rpc: jsonrpc });\n\n  // Set listeners for disconnection and reconnection event.\n  _api.on('connected', () => {\n    dispatch({ type: 'CONNECT', payload: _api });\n    // `ready` event is not emitted upon reconnection and is checked explicitly here.\n    _api.isReady.then((_api) => dispatch({ type: 'CONNECT_SUCCESS' }));\n  });\n  _api.on('ready', () => dispatch({ type: 'CONNECT_SUCCESS' }));\n  _api.on('error', err => dispatch({ type: 'CONNECT_ERROR', payload: err }));\n};\n\n///\n// Loading accounts from dev and polkadot-js extension\n\nlet loadAccts = false;\nconst loadAccounts = (state, dispatch) => {\n  const asyncLoadAccounts = async () => {\n    dispatch({ type: 'LOAD_KEYRING' });\n    try {\n      await web3Enable(config.APP_NAME);\n      let allAccounts = await web3Accounts();\n      allAccounts = allAccounts.map(({ address, meta }) =>\n        ({ address, meta: { ...meta, name: `${meta.name} (${meta.source})` } }));\n      keyring.loadAll({ isDevelopment: config.DEVELOPMENT_KEYRING }, allAccounts);\n      dispatch({ type: 'SET_KEYRING', payload: keyring });\n    } catch (e) {\n      console.error(e);\n      dispatch({ type: 'KEYRING_ERROR' });\n    }\n  };\n\n  const { keyringState } = state;\n  // If `keyringState` is not null `asyncLoadAccounts` is running.\n  if (keyringState) return;\n  // If `loadAccts` is true, the `asyncLoadAccounts` has been run once.\n  if (loadAccts) return dispatch({ type: 'SET_KEYRING', payload: keyring });\n\n  // This is the heavy duty work\n  loadAccts = true;\n  asyncLoadAccounts();\n};\n\nconst SubstrateContext = React.createContext();\n\nconst SubstrateContextProvider = (props) => {\n  // filtering props and merge with default param value\n  const initState = { ...INIT_STATE };\n  const neededPropNames = ['socket', 'types'];\n  neededPropNames.forEach(key => {\n    initState[key] = (typeof props[key] === 'undefined' ? initState[key] : props[key]);\n  });\n\n  const [state, dispatch] = useReducer(reducer, initState);\n  connect(state, dispatch);\n  loadAccounts(state, dispatch);\n\n  return <SubstrateContext.Provider value={state}>\n    {props.children}\n  </SubstrateContext.Provider>;\n};\n\n// prop typechecking\nSubstrateContextProvider.propTypes = {\n  socket: PropTypes.string,\n  types: PropTypes.object\n};\n\nconst useSubstrate = () => ({ ...useContext(SubstrateContext) });\n\nexport { SubstrateContextProvider, useSubstrate };\n","const utils = {\n  paramConversion: {\n    num: [\n      'Compact<Balance>',\n      'BalanceOf',\n      'u8', 'u16', 'u32', 'u64', 'u128',\n      'i8', 'i16', 'i32', 'i64', 'i128'\n    ]\n  }\n};\n\nexport default utils;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'semantic-ui-react';\nimport { web3FromSource } from '@polkadot/extension-dapp';\n\nimport { useSubstrate } from '../';\nimport utils from '../utils';\n\nfunction TxButton ({\n  accountPair = null,\n  label,\n  setStatus,\n  color = 'blue',\n  style = null,\n  type = 'QUERY',\n  attrs = null,\n  disabled = false\n}) {\n  // Hooks\n  const { api } = useSubstrate();\n  const [unsub, setUnsub] = useState(null);\n  const [sudoKey, setSudoKey] = useState(null);\n\n  const { palletRpc, callable, inputParams, paramFields } = attrs;\n\n  const isQuery = () => type === 'QUERY';\n  const isSudo = () => type === 'SUDO-TX';\n  const isUncheckedSudo = () => type === 'UNCHECKED-SUDO-TX';\n  const isUnsigned = () => type === 'UNSIGNED-TX';\n  const isSigned = () => type === 'SIGNED-TX';\n  const isRpc = () => type === 'RPC';\n  const isConstant = () => type === 'CONSTANT';\n\n  const loadSudoKey = () => {\n    (async function () {\n      if (!api) { return; }\n      // const sudoKey = await api.query.sudo.key();\n      setSudoKey(null)\n    })();\n  };\n\n  useEffect(loadSudoKey, [api]);\n\n  const getFromAcct = async () => {\n    const {\n      address,\n      meta: { source, isInjected }\n    } = accountPair;\n    let fromAcct;\n\n    // signer is from Polkadot-js browser extension\n    if (isInjected) {\n      const injected = await web3FromSource(source);\n      fromAcct = address;\n      api.setSigner(injected.signer);\n    } else {\n      fromAcct = accountPair;\n    }\n\n    return fromAcct;\n  };\n\n  const txResHandler = ({ status }) =>\n    status.isFinalized\n      ? setStatus(`😉 Finalized. Block hash: ${status.asFinalized.toString()}`)\n      : setStatus(`Current transaction status: ${status.type}`);\n\n  const txErrHandler = err =>\n    setStatus(`😞 Transaction Failed: ${err.toString()}`);\n\n  const sudoTx = async () => {\n    const fromAcct = await getFromAcct();\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n    const txExecute = transformed\n      ? api.tx.sudo.sudo(api.tx[palletRpc][callable](...transformed))\n      : api.tx.sudo.sudo(api.tx[palletRpc][callable]());\n\n    const unsub = txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const uncheckedSudoTx = async () => {\n    const fromAcct = await getFromAcct();\n    const txExecute =\n        api.tx.sudo.sudoUncheckedWeight(api.tx[palletRpc][callable](...inputParams), 0);\n\n    const unsub = txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const signedTx = async () => {\n    const fromAcct = await getFromAcct();\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n\n    const txExecute = transformed\n      ? api.tx[palletRpc][callable](...transformed)\n      : api.tx[palletRpc][callable]();\n\n    const unsub = await txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const unsignedTx = async () => {\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n    const txExecute = transformed\n      ? api.tx[palletRpc][callable](...transformed)\n      : api.tx[palletRpc][callable]();\n\n    const unsub = await txExecute.send(txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const queryResHandler = result =>\n    result.isNone ? setStatus('None') : setStatus(result.toString());\n\n  const query = async () => {\n    const transformed = transformParams(paramFields, inputParams);\n    const unsub = await api.query[palletRpc][callable](...transformed, queryResHandler);\n    setUnsub(() => unsub);\n  };\n\n  const rpc = async () => {\n    const transformed = transformParams(paramFields, inputParams, { emptyAsNull: false });\n    const unsub = await api.rpc[palletRpc][callable](...transformed, queryResHandler);\n    setUnsub(() => unsub);\n  };\n\n  const constant = () => {\n    const result = api.consts[palletRpc][callable];\n    result.isNone ? setStatus('None') : setStatus(result.toString());\n  };\n\n  const transaction = async () => {\n    if (unsub) {\n      unsub();\n      setUnsub(null);\n    }\n\n    setStatus('Sending...');\n\n    (isSudo() && sudoTx()) ||\n    (isUncheckedSudo() && uncheckedSudoTx()) ||\n    (isSigned() && signedTx()) ||\n    (isUnsigned() && unsignedTx()) ||\n    (isQuery() && query()) ||\n    (isRpc() && rpc()) ||\n    (isConstant() && constant());\n  };\n\n  const transformParams = (paramFields, inputParams, opts = { emptyAsNull: true }) => {\n    // if `opts.emptyAsNull` is true, empty param value will be added to res as `null`.\n    //   Otherwise, it will not be added\n    const paramVal = inputParams.map(inputParam => {\n      // To cater the js quirk that `null` is a type of `object`.\n      if (typeof inputParam === 'object' && inputParam !== null && typeof inputParam.value === 'string') {\n        return inputParam.value.trim();\n      } else if (typeof inputParam === 'string') {\n        return inputParam.trim();\n      }\n      return inputParam;\n    });\n    const params = paramFields.map((field, ind) => ({ ...field, value: paramVal[ind] || null }));\n\n    return params.reduce((memo, { type = 'string', value }) => {\n      if (value == null || value === '') return (opts.emptyAsNull ? [...memo, null] : memo);\n\n      let converted = value;\n\n      // Deal with a vector\n      if (type.indexOf('Vec<') >= 0) {\n        converted = converted.split(',').map(e => e.trim());\n        converted = converted.map(single => isNumType(type)\n          ? (single.indexOf('.') >= 0 ? Number.parseFloat(single) : Number.parseInt(single))\n          : single\n        );\n        return [...memo, converted];\n      }\n\n      // Deal with a single value\n      if (isNumType(type)) {\n        converted = converted.indexOf('.') >= 0 ? Number.parseFloat(converted) : Number.parseInt(converted);\n      }\n      return [...memo, converted];\n    }, []);\n  };\n\n  const isNumType = type =>\n    utils.paramConversion.num.some(el => type.indexOf(el) >= 0);\n\n  const allParamsFilled = () => {\n    if (paramFields.length === 0) { return true; }\n\n    return paramFields.every((paramField, ind) => {\n      const param = inputParams[ind];\n      if (paramField.optional) { return true; }\n      if (param == null) { return false; }\n\n      const value = typeof param === 'object' ? param.value : param;\n      return value !== null && value !== '';\n    });\n  };\n\n  const isSudoer = acctPair => {\n    if (!sudoKey || !acctPair) { return false; }\n    return acctPair.address === sudoKey;\n  };\n\n  return (\n    <Button\n      basic\n      color={color}\n      style={style}\n      type='submit'\n      onClick={transaction}\n      disabled={ disabled || !palletRpc || !callable || !allParamsFilled() ||\n        ((isSudo() || isUncheckedSudo()) && !isSudoer(accountPair)) }\n    >\n      {label}\n    </Button>\n  );\n}\n\n// prop type checking\nTxButton.propTypes = {\n  accountPair: PropTypes.object,\n  setStatus: PropTypes.func.isRequired,\n  type: PropTypes.oneOf([\n    'QUERY', 'RPC', 'SIGNED-TX', 'UNSIGNED-TX', 'SUDO-TX', 'UNCHECKED-SUDO-TX',\n    'CONSTANT']).isRequired,\n  attrs: PropTypes.shape({\n    palletRpc: PropTypes.string,\n    callable: PropTypes.string,\n    inputParams: PropTypes.array,\n    paramFields: PropTypes.array\n  }).isRequired\n};\n\nfunction TxGroupButton (props) {\n  return (\n    <Button.Group>\n      <TxButton\n        label='Unsigned'\n        type='UNSIGNED-TX'\n        color='grey'\n        {...props}\n      />\n      <Button.Or />\n      <TxButton\n        label='Signed'\n        type='SIGNED-TX'\n        color='blue'\n        {...props}\n      />\n      <Button.Or />\n      <TxButton\n        label='SUDO'\n        type='SUDO-TX'\n        color='red'\n        {...props}\n      />\n    </Button.Group>\n  );\n}\n\nexport { TxButton, TxGroupButton };\n","// This component will simply add utility functions to your developer console.\nimport { useSubstrate } from '../';\n\nexport default function DeveloperConsole (props) {\n  const { api, apiState, keyring, keyringState } = useSubstrate();\n  if (apiState === 'READY') { window.api = api; }\n  if (keyringState === 'READY') { window.keyring = keyring; }\n  window.util = require('@polkadot/util');\n  window.utilCrypto = require('@polkadot/util-crypto');\n\n  return null;\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Table, Grid } from \"semantic-ui-react\";\nimport { useSubstrate } from \"./substrate-lib\";\n\nexport default function BlockInfo(props) {\n  const { api, keyring } = useSubstrate();\n  const [blockInfo, setBlockInfo] = useState({});\n\n  async function getData() {\n    return await api.rpc.chain.subscribeNewHeads((header) =>\n      setBlockInfo([\n        { name: \"Number\", value: header.number.toNumber() },\n        { name: \"Hash\", value: header.hash.toHex() },\n        { name: \"Parent Hash\", value: header.parentHash.toHex() },\n        { name: \"State Root\", value: header.stateRoot.toHuman() },\n        { name: \"Extrinsics Root\", value: header.extrinsicsRoot.toHuman() },\n      ])\n    );\n  }\n\n  useEffect(() => {\n    const unsub = getData();\n\n    return () => unsub && unsub();\n  }, [api, keyring, setBlockInfo]);\n\n  return (\n    <Grid.Column>\n      <h1>Latest Block Info</h1>\n      <Table celled striped size=\"small\">\n        <Table.Body>\n          {blockInfo && blockInfo[0]\n            ? blockInfo.map((info) => (\n                <Table.Row key={info.name}>\n                  <Table.Cell width={3} textAlign=\"right\">\n                    {info.name}\n                  </Table.Cell>\n                  <Table.Cell width={3}>{info.value}</Table.Cell>\n                </Table.Row>\n              ))\n            : null}\n        </Table.Body>\n      </Table>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Form, Input, Grid, Card, Statistic } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const { accountPair } = props;\n\n  // The transaction submission status\n  const [status, setStatus] = useState('');\n\n  // The currently stored value\n  const [currentValue, setCurrentValue] = useState(0);\n  const [formValue, setFormValue] = useState(0);\n\n  useEffect(() => {\n    let unsubscribe;\n    api.query.templateModule.something(newValue => {\n      // The storage value is an Option<u32>\n      // So we have to check whether it is None first\n      // There is also unwrapOr\n      if (newValue.isNone) {\n        setCurrentValue('<None>');\n      } else {\n        setCurrentValue(newValue.unwrap().toNumber());\n      }\n    }).then(unsub => {\n      unsubscribe = unsub;\n    })\n      .catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n  }, [api.query.templateModule]);\n\n  return (\n    <Grid.Column width={8}>\n      <h1>Template Module</h1>\n      <Card centered>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label='Current Value'\n            value={currentValue}\n          />\n        </Card.Content>\n      </Card>\n      <Form>\n        <Form.Field>\n          <Input\n            label='New Value'\n            state='newValue'\n            type='number'\n            onChange={(_, { value }) => setFormValue(value)}\n          />\n        </Form.Field>\n        <Form.Field style={{ textAlign: 'center' }}>\n          <TxButton\n            accountPair={accountPair}\n            label='Store Something'\n            type='SIGNED-TX'\n            setStatus={setStatus}\n            attrs={{\n              palletRpc: 'templateModule',\n              callable: 'doSomething',\n              inputParams: [formValue],\n              paramFields: [true]\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n\nexport default function TemplateModule (props) {\n  const { api } = useSubstrate();\n  return (api.query.templateModule && api.query.templateModule.something\n    ? <Main {...props} /> : null);\n}\n","import React, { useRef, useState } from \"react\";\nimport { Table, Grid, Button } from \"semantic-ui-react\";\nimport { useSubstrate } from \"./substrate-lib\";\n\nexport default function SearchBlock(props) {\n  const { api } = useSubstrate();\n  const [blockInfo, setBlockInfo] = useState({});\n  const inputRef = useRef(null);\n\n  const handleSearch = async () => {\n    setBlockInfo(null);\n    const searchValue = inputRef.current.value;\n\n    if (!searchValue) return;\n    let block = {};\n    try {\n      if (searchValue.indexOf('0x') >= 0) {\n        block = await api.rpc.chain.getBlock(searchValue);\n      } else {\n        const hash = await api.rpc.chain.getBlockHash(searchValue);\n        block = await api.rpc.chain.getBlock(hash);\n      }\n      setBlockInfo([\n        { name: \"Number\", value: block.block.header.number.toNumber() },\n        { name: \"Hash\", value: block.block.header.hash.toHex() },\n        { name: \"Parent Hash\", value: block.block.header.parentHash.toHex() },\n        { name: \"State Root\", value: block.block.header.stateRoot.toHuman() },\n        {\n          name: \"extrinsicsRoot\",\n          value: block.block.header.extrinsicsRoot.toHuman(),\n        },\n      ]);\n    } catch (err) {\n      console.error(err);\n    }\n    \n  };\n\n  return (\n    <Grid.Column>\n      <h1>Search for Block Info</h1>\n      <input ref={inputRef} type=\"text\" />\n      <Button onClick={handleSearch}>Search</Button>\n      {blockInfo && (\n        <Table celled striped size=\"small\">\n          <Table.Body>\n            {blockInfo && blockInfo[0] ? (\n              blockInfo.map((info) => (\n                <Table.Row key={info.name}>\n                  <Table.Cell width={3} textAlign=\"right\">\n                    {info.name}\n                  </Table.Cell>\n                  <Table.Cell width={3}>{info.value}</Table.Cell>\n                </Table.Row>\n              ))\n            ) : (\n              <Table.Row></Table.Row>\n            )}\n          </Table.Body>\n        </Table>\n      )}\n    </Grid.Column>\n  );\n}\n","import React, { useState, createRef } from \"react\";\nimport {\n  Container,\n  Dimmer,\n  Loader,\n  Grid,\n  Message,\n} from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport { SubstrateContextProvider, useSubstrate } from \"./substrate-lib\";\nimport { DeveloperConsole } from \"./substrate-lib/components\";\nimport BlockInfo from \"./BlockInfo\";\n\nimport TemplateModule from \"./TemplateModule\";\nimport SearchBlock from \"./SearchBlock\";\n\nfunction Main() {\n  const [accountAddress, setAccountAddress] = useState(null);\n  const { apiState, keyring, keyringState, apiError } = useSubstrate();\n  const accountPair =\n    accountAddress &&\n    keyringState === \"READY\" &&\n    keyring.getPair(accountAddress);\n\n  const loader = (text) => (\n    <Dimmer active>\n      <Loader size=\"small\">{text}</Loader>\n    </Dimmer>\n  );\n\n  const message = (err) => (\n    <Grid centered columns={2} padded>\n      <Grid.Column>\n        <Message\n          negative\n          compact\n          floating\n          header=\"Error Connecting to Substrate\"\n          content={`${JSON.stringify(err, null, 4)}`}\n        />\n      </Grid.Column>\n    </Grid>\n  );\n\n  if (apiState === \"ERROR\") return message(apiError);\n  else if (apiState !== \"READY\") return loader(\"Connecting to Substrate\");\n\n  if (keyringState !== \"READY\") {\n    return loader(\n      \"Loading accounts (please review any extension's authorization)\"\n    );\n  }\n\n  const contextRef = createRef();\n\n  return (\n    <div ref={contextRef}>\n      <Container>\n        <Grid stackable columns=\"equal\">\n          <Grid.Row>\n            <BlockInfo />\n          </Grid.Row>\n          <Grid.Row>\n            <SearchBlock />\n          </Grid.Row>\n          <Grid.Row>\n            <TemplateModule accountPair={accountPair} />\n          </Grid.Row>\n        </Grid>\n      </Container>\n      <DeveloperConsole />\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <SubstrateContextProvider>\n      <Main />\n    </SubstrateContextProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}